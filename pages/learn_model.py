import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
import sys
import os
import umap
import plotly.express as px


from data_utils import load_data

from learning_a_model import ComparativeAdvantageModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤",
    page_icon="üß†",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤")
st.write("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ session_state –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if 'filtered_data' not in st.session_state:
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        df, load_time = load_data()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥!")
    
    st.warning("–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    top_countries = 50
    top_products = 100
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø —Å—Ç—Ä–∞–Ω –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
    top_countries_list = df.groupby('country')['value_1000_usd'].sum().sort_values(ascending=False).head(top_countries).index.tolist()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
    top_products_list = df.groupby('hs_product_description')['value_1000_usd'].sum().sort_values(ascending=False).head(top_products).index.tolist()
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_data = df[
        (df['country'].isin(top_countries_list)) & 
        (df['hs_product_description'].isin(top_products_list))
    ].copy()
    
    st.session_state['filtered_data'] = filtered_data
    st.session_state['top_countries_list'] = top_countries_list
    st.session_state['top_products_list'] = top_products_list
else:
    filtered_data = st.session_state['filtered_data']
    st.success(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(st.session_state['top_countries_list'])} —Å—Ç—Ä–∞–Ω –∏ {len(st.session_state['top_products_list'])} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
st.write(f"–†–∞–∑–º–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {filtered_data.shape[0]} —Å—Ç—Ä–æ–∫")

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
with st.expander("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
    display_data = filtered_data.copy()
    display_data['value_1000_usd'] = display_data['value_1000_usd'].apply(lambda x: f"${x/1000000:.0f} bln")
    display_data.rename(columns={'value_1000_usd': '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–ª—Ä–¥ USD)'}, inplace=True)
    st.dataframe(display_data.head(20))

# –°–µ–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")

col1, col2 = st.columns(2)

with col1:
    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
    n_factors = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª–∏", 
        min_value=2, 
        max_value=10, 
        value=2,
        help="–ë–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏, –Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"
    )

with col2:
    # –í—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞ –¥–ª—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏
    threshold = st.slider(
        "–ü–æ—Ä–æ–≥ –∏–Ω–¥–µ–∫—Å–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", 
        min_value=1.0, 
        max_value=5.0, 
        value=1.0, 
        step=0.1,
        help="–ó–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∞ –∏–º–µ–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è"):
    use_weights = st.checkbox(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏", 
        value=False,
        help="–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏"
    )

if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
    with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏..."):
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        filtered_data['total_export_of_country'] = filtered_data.groupby('country')['value_1000_usd'].transform('sum')
        filtered_data['total_export_of_product'] = filtered_data.groupby('hs_product_description')['value_1000_usd'].transform('sum')
        
        filtered_data['share_in_countries_export'] = filtered_data['value_1000_usd'] / filtered_data['total_export_of_country']
        filtered_data['share_in_world_export'] = filtered_data['total_export_of_product'] / filtered_data['value_1000_usd'].sum()
        
        filtered_data['specialization_index'] = filtered_data['share_in_countries_export'] / filtered_data['share_in_world_export']
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ top_products_list
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        pivot_data = filtered_data.pivot_table(
            index='country', 
            columns='hs_product_description', 
            values='specialization_index', 
            aggfunc='sum'
        ).fillna(0)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º –≤ product_order
        pivot_data = pivot_data[[col for col in st.session_state['top_products_list'] if col in pivot_data.columns]]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É (L) —Å —É—á–µ—Ç–æ–º –ø–æ—Ä–æ–≥–∞
        L = (pivot_data > threshold).astype(int)
        Y = L.to_numpy()
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω–¥–µ–∫—Å–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        weights = None
        if use_weights:
            trade_weights = filtered_data.pivot_table(
                index='country', 
                columns='hs_product_description', 
                values='value_1000_usd', 
                aggfunc='sum'
            ).fillna(0)
            
            total_world_trade = trade_weights.sum().sum()
            weights = (trade_weights / total_world_trade * 100).to_numpy()
        
    with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å {n_factors} –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏..."):
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = ComparativeAdvantageModel(n_factors=n_factors)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            result = model.fit(Y, weights=weights, method='L-BFGS-B')
            
            st.session_state['model'] = model
            st.session_state['model_results'] = result
            st.session_state['country_names'] = L.index.tolist()
            st.session_state['product_names'] = L.columns.tolist()
            st.session_state['model_threshold'] = threshold
            st.session_state['n_factors'] = min(3, model.n_factors)

            country_reducer = umap.UMAP(n_components=st.session_state['n_factors'], random_state=42)
            country_embedding = country_reducer.fit_transform(model.country_vectors)
            
            # –°–æ–∑–¥–∞–µ–º UMAP-–ø—Ä–æ–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            product_reducer = umap.UMAP(n_components=st.session_state['n_factors'], random_state=42)
            product_embedding = product_reducer.fit_transform(model.product_vectors)
            
            st.session_state['country_embedding'] = country_embedding
            st.session_state['product_embedding'] = product_embedding
            
            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞)
if 'model' in st.session_state:
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")
    
    model = st.session_state['model']
    country_names = st.session_state['country_names']
    product_names = st.session_state['product_names']
    
    st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤")

    col1, col2 = st.columns(2)
    with col1:
        include_countries = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã", value=True)
    with col2:
        include_products = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", value=True)
        
    if not include_countries and not include_products:
        st.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        include_countries = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    
    use_umap = False
    if not (include_countries and include_products):
        use_umap = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UMAP –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", value=False, disabled=(include_countries and include_products))

    color_by_gdp = False
    if include_countries and not include_products:
        color_by_gdp = st.checkbox("–û–∫—Ä–∞—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω—ã –ø–æ –í–í–ü", value=False)

    if use_umap:
        country_reducer = umap.UMAP(n_components=st.session_state['n_factors'], random_state=42)
        country_embedding = country_reducer.fit_transform(model.country_vectors)
        
        product_reducer = umap.UMAP(n_components=st.session_state['n_factors'], random_state=42)
        product_embedding = product_reducer.fit_transform(model.product_vectors)
    else:
        country_embedding = model.country_vectors
        product_embedding = model.product_vectors

    data_frames_3d = []
    if include_countries:
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω
        country_df_3d = pd.DataFrame({
            'x': country_embedding[:, 0],
            'y': country_embedding[:, 1],
            'z': country_embedding[:, 2] if model.n_factors >= 3 else 0,
            'name': country_names,
            'type': '–°—Ç—Ä–∞–Ω–∞'
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –í–í–ü, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ–ø—Ü–∏—è
        if color_by_gdp:
            gdp_data = pd.read_csv('data/gdp.csv')
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω –∫ –æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è
            gdp_data['country'] = gdp_data['country'].str.strip()
            country_df_3d['country'] = country_df_3d['name'].str.strip()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            country_df_3d = country_df_3d.merge(
                gdp_data[['country', 'gdp_ppp']], 
                left_on='country', 
                right_on='country', 
                how='left'
            )
    
        data_frames_3d.append(country_df_3d)
    if include_products:
        product_df_3d = pd.DataFrame({
            'x': product_embedding[:min(100, len(product_names)), 0],
            'y': product_embedding[:min(100, len(product_names)), 1],
            'z': product_embedding[:min(100, len(product_names)), 2] if model.n_factors >= 3 else 0,
            'name': product_names[:min(100, len(product_names))],
            'type': '–ü—Ä–æ–¥—É–∫—Ç'
        })
        data_frames_3d.append(product_df_3d)

    all_data_3d = pd.concat(data_frames_3d, ignore_index=True)

    fig = px.scatter_3d(
        all_data_3d,
        x='x',
        y='y',
        z='z',
        color='gdp_ppp' if color_by_gdp else 'type',
        hover_name='name',
        title='–í–µ–∫—Ç–æ—Ä—ã —Å—Ç—Ä–∞–Ω –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤',
        labels={'x': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1', 'y': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2', 'z': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3'},
        width=1000,
        height=800
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    st.plotly_chart(fig, use_container_width=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    st.subheader("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å—Ç—Ä–∞–Ω")
    country_table = pd.DataFrame(
        model.country_vectors,
        columns=[f"factor_{i+1}" for i in range(model.n_factors)]
    )
    country_table.insert(0, "–°—Ç—Ä–∞–Ω–∞", country_names)
    st.dataframe(country_table)

    st.subheader("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    product_table = pd.DataFrame(
        model.product_vectors,
        columns=[f"factor_{i+1}" for i in range(model.n_factors)]
    )
    product_table.insert(0, "–ü—Ä–æ–¥—É–∫—Ç", product_names)
    st.dataframe(product_table)

    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_df = pd.DataFrame(index=country_names)
        export_df['country_intercept'] = model.country_intercepts
        
        for i in range(model.n_factors):
            export_df[f'country_factor_{i+1}'] = model.country_vectors[:, i]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV
        csv = export_df.to_csv().encode('utf-8')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
            data=csv,
            file_name="country_factors.csv",
            mime="text/csv",
        )

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
st.sidebar.header("–û –º–æ–¥–µ–ª–∏")
st.sidebar.info("""
    **–ú–æ–¥–µ–ª—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤** –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –∫ –≤—ã—è–≤–ª–µ–Ω–∏—é —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, 
    –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–∞—Ö —ç–∫–æ–Ω–æ–º–∏–∫–∏.
    
    –ú–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç:
    - –í—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω
    - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã —Å—Ç—Ä–∞–Ω —Å –ø–æ—Ö–æ–∂–∏–º–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
    - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
""")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
st.sidebar.page_link("main_page.py", label="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", icon="üè†")
st.sidebar.page_link("pages/learn_model.py", label="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", icon="üß†") 
